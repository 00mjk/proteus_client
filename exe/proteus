#!/usr/bin/env ruby

####
# proteus cli -
# Provides frontend CLI access to the Bluecat proteus API
#
# Usage:
# ./proteus [global options] command [command options] [arguments...]
#

require 'awesome_print'
require 'gli'
require 'yaml'
require 'proteus'

include GLI::App

program_desc '#AllyourDNSRecords are belong to us.'

desc 'Location of a config file (overrides environment variables and command line flags)'
flag [:c, :config_file], type: String

desc 'Url to proteus (not including URI to the WSDL) ENV:PROTEUS_URL'
flag [:u, :url], type: String

desc 'Username to use when connecting to proteus ENV:PROTEUS_USER'
flag [:a, :username], type: String

desc 'Password to use when connecting to proteus ENV:PROTEUS_PASS'
flag [:p, :password], type: String

desc 'Default view id to use when connecting to proteus ENV:PROTEUS_VIEWID'
flag [:v, :viewid], type: String

desc 'Log level (debug, info, warn, error)'
flag [:l, :loglevel], type: String, default_value: 'warn'

pre do |global_options, _command, _options, _args|
  if global_options[:config_file]
    $config = YAML.load_file(global_options[:config_file])
  else
    $config = {
      'bluecat' => {
        'url' => global_options[:url] || ENV['PROTEUS_URL'],
        'user' => global_options[:user] || ENV['PROTEUS_USER'],
        'password' => global_options[:password] || ENV['PROTEUS_PASS'],
        'default_viewid' => global_options[:viewid] || ENV['PROTEUS_VIEWID']
      },
      'log' => {
          'level' => global_options[:loglevel]
      }
    }
  end
end

around do |_global_options, _command,v_options, _args,code|
  options = $config['bluecat']
  log_level = $config['log']['level']
  @proteus = Proteus::Client.new(options, log_level)
  code.call
  @proteus.logout!
end

def validate_argnum(required, given)
  raise "command requires #{required} args" unless required == given
end

desc 'Displays system info'
command :info do |c|
  c.action do |_global_options, _options, args|
    puts 'System Information:'
    ap @proteus.system_info
  end
end

desc 'Search DNS record(s) (do not include domain!)'
command :search do |c|
  c.desc 'searches for a host record'
  c.arg_name 'keyword'
  c.command :host do |a|
    a.action do |_global_options, _options, args|
      validate_argnum(1, args.length)
      ap @proteus.search_by_object_types(args[0], Proteus::Types::HOSTRECORD)
    end
  end

  c.desc 'searches for an alias record'
  c.arg_name 'keyword'
  c.command :alias do |a|
    a.action do |_global_options, _options, args|
      validate_argnum(1, args.length)
      ap @proteus.search_by_object_types(args[0], Proteus::Types::CNAMERECORD)
    end
  end

  c.desc 'searches for an external record'
  c.arg_name 'keyword'
  c.command :external do |a|
    a.action do |_global_options, _options, args|
      validate_argnum(1, args.length)
      ap @proteus.search_by_object_types(args[0], Proteus::Types::EXTERNALHOST)
    end
  end
end

desc 'Show DNS record by id'
command :show do |c|
  c.action do |_global_options, _options, args|
    validate_argnum(1, args.length)
    ap @proteus.get_entity_by_id(args[0])
  end
end

desc 'Add a DNS record'
command :add do |c|
  c.desc 'adds an alias (CNAME)'
  c.arg_name 'alias_record linked_record'
  c.command :alias do |a|
    a.action do |_global_options, _options, args|
      validate_argnum(2, args.length)
      ap @proteus.add_alias_record(args[0], args[1])
    end
  end

  c.desc 'adds an host record (A)'
  c.arg_name 'fqdn ip'
  c.command :host do |a|
    a.action do |_global_options, _options, args|
      validate_argnum(2, args.length)
      ap @proteus.add_host_record(args[0], args[1])
    end
  end

  c.desc 'adds an external record'
  c.arg_name 'name'
  c.command :external do |a|
    a.action do |_global_options, _options, args|
      validate_argnum(1, args.length)
      ap @proteus.add_external_host_record(args[0])
    end
  end
end

desc 'Delete DNS record by id'
command :delete do |c|
  c.action do |_global_options, _options, args|
    validate_argnum(1, args.length)
    ap @proteus.delete(args[0])
  end
end

exit run(ARGV)
